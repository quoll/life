["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Float32Array",["^ "],"~$Int8Array",["^ "],"~$Int16Array",["^ "],"~$Uint32Array",["^ "],"~$Uint8Array",["^ "],"~$Uint8ClampedArray",["^ "],"~$window",["^ "],"~$Int32Array",["^ "],"~$Uint16Array",["^ "],"~$Float64Array",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$thi.ng.typedarrays.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$uint8",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","~:line",16,"~:column",7,"~:end-line",16,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^P",[["~$size-or-coll"]]]]],"~:doc","Creates a native Uint8Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/uint8","~:variadic",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",12,"~:method-params",["^P",[["^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^L",1,"^K",16,"^M",16,"~:max-fixed-arity",1,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint8Array of the given size or from `coll`."],"~$typed-arrays-supported?",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",120,"^L",7,"^M",120,"^N",30,"^O",["^P",["^Q",["^P",[[]]]]],"^S","Returns true if JS runtime supports typed arrays"],"^@","~$thi.ng.typedarrays.core/typed-arrays-supported?","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",30,"^V",["^P",[[]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",120,"^M",120,"^Y",0,"^Z",true,"^O",["^P",["^Q",["^P",[[]]]]],"^S","Returns true if JS runtime supports typed arrays"],"~$uint8-clamped",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",29,"^L",7,"^M",29,"^N",20,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint8ClampedArray of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/uint8-clamped","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",20,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",29,"^M",29,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint8ClampedArray of the given size or from `coll`."],"~$int32",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",68,"^L",7,"^M",68,"^N",12,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int32Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/int32","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",12,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",68,"^M",68,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int32Array of the given size or from `coll`."],"~$int16",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",42,"^L",7,"^M",42,"^N",12,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int16Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/int16","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",12,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",42,"^M",42,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int16Array of the given size or from `coll`."],"~$float32",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",94,"^L",7,"^M",94,"^N",14,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Float32Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/float32","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",14,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",94,"^M",94,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Float32Array of the given size or from `coll`."],"~$array-types",["^ ","^@","~$thi.ng.typedarrays.core/array-types","^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",124,"^L",1,"^M",124,"^N",27,"~:private",true,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",124,"^L",16,"^M",124,"^N",27,"^1;",true],"~:tag","~$cljs.core/IMap"],"~$float64",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",107,"^L",7,"^M",107,"^N",14,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Float64Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/float64","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",14,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",107,"^M",107,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Float64Array of the given size or from `coll`."],"~$array-type",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",135,"^L",7,"^M",135,"^N",17,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^@","~$thi.ng.typedarrays.core/array-type","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",17,"^V",["^P",[["~$x"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",135,"^M",135,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"~$uint16",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",55,"^L",7,"^M",55,"^N",13,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint16Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/uint16","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",13,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",55,"^M",55,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint16Array of the given size or from `coll`."],"~$int8",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",3,"^L",7,"^M",3,"^N",11,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int8Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/int8","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",11,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",3,"^M",3,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Int8Array of the given size or from `coll`."],"~$uint32",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",81,"^L",7,"^M",81,"^N",13,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint32Array of the given size or from `coll`."],"^@","~$thi.ng.typedarrays.core/uint32","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",13,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",81,"^M",81,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^S","Creates a native Uint32Array of the given size or from `coll`."],"~$typed-array?",["^ ","^H",null,"^I",["^ ","^J","/Users/pgearon/dev/public/life/resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^K",138,"^L",7,"^M",138,"^N",19,"^O",["^P",["^Q",["^P",[["~$x"]]]]],"^S","Returns truthy value if the given arg is a typed array instance"],"^@","~$thi.ng.typedarrays.core/typed-array?","^U",false,"^J","resources/public/cljs/out/thi/ng/typedarrays/core.cljs","^N",19,"^V",["^P",[["~$x"]]],"^W",null,"^X",["^P",[null,null]],"^L",1,"^K",138,"^M",138,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]],"^S","Returns truthy value if the given arg is a typed array instance"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:int32","~:uint8-clamped","~:int16","~:float32","~:float64","~:else","~:uint16","~:array","~:int8","~:uint32","~:uint8"]],"~:order",["^1R","^1V","^1P","^1X","^1T","^1O","^1W","^1Q","^1N","^1U","^1S"]],"^S",null]