["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$TODO","~$clojure.core.matrix.macros","~$error","^6"],"~:excludes",["~#set",[]],"~:name","~$clojure.core.matrix.implementations","~:imports",null,"~:requires",["^ ","~$mp","~$clojure.core.matrix.protocols","^?","^?","^6","^6"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$construct",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","~:line",156,"~:column",7,"~:end-line",156,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^L",[["~$m","~$data"]]]]],"~:doc","Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."],"^:","~$clojure.core.matrix.implementations/construct","~:variadic",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",16,"~:method-params",["^L",[["~$m","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"^G",156,"^I",156,"~:max-fixed-arity",2,"~:fn-var",true,"^K",["^L",["^M",["^L",[["~$m","^N"]]]]],"^O","Attempts to construct an array according to the type of array m. If not possible,\n   returns another array type."],"~$*matrix-implementation*",["^ ","^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",51,"^H",16,"^I",51,"^J",39,"~:dynamic",true],"^:","~$clojure.core.matrix.implementations/*matrix-implementation*","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",39,"^H",1,"^X",true,"^G",51,"^I",51,"~:tag","~$cljs.core/Keyword","^O","A dynamic var specifying the current core.matrix implementation in use.\n\n   May be re-bound to temporarily use a different core.matrix implementation."],"~$get-canonical-object-or-throw",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",151,"^H",7,"^I",151,"^J",36,"^K",["^L",["^M",["^L",[["~$mk"]]]]],"^O","Like get-canonical-object, except it throws an exception if the implementation cannot be found"],"^:","~$clojure.core.matrix.implementations/get-canonical-object-or-throw","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",36,"^R",["^L",[["^11"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",151,"^I",151,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^11"]]]]],"^O","Like get-canonical-object, except it throws an exception if the implementation cannot be found"],"~$*numeric-implementation*",["^ ","^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",57,"^H",16,"^I",57,"^J",40,"^X",true],"^:","~$clojure.core.matrix.implementations/*numeric-implementation*","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",40,"^H",1,"^X",true,"^G",57,"^I",57,"^Z","^[","^O","A dynamic var specifying the current core.matrix numeric implementation in use.\n\n   May be re-bound to temporarily use a different core.matrix implementation."],"~$load-implementation",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",124,"^H",7,"^I",124,"^J",26,"^K",["^L",["^M",["^L",[["~$korm"]]]]],"^O","Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"^:","~$clojure.core.matrix.implementations/load-implementation","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",26,"^R",["^L",[["^16"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",124,"^I",124,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^16"]]]]],"^O","Attempts to load the implementation for a given keyword or matrix object.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"~$KNOWN-IMPLEMENTATIONS",["^ ","^:","~$clojure.core.matrix.implementations/KNOWN-IMPLEMENTATIONS","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",12,"^H",1,"^I",12,"^J",27,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",12,"^H",6,"^I",12,"^J",27],"^O","A map of known core.matrix implementation namespaces.\n\n   core.matrix will attempt to load these namespaces when an array of the specified\n   keyword type is requested.","^Z","~$cljs.core/PersistentArrayMap"],"~$*debug-options*",["^ ","^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",70,"^H",3,"^I",70,"^J",18,"^O","A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation","^X",true],"^:","~$clojure.core.matrix.implementations/*debug-options*","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",18,"^H",1,"^X",true,"^G",63,"^I",70,"^Z","~$cljs.core/IMap","^O","A dynamic var supporting debugging option for core.matrix implementers.\n\n   Currently supported values:\n     :print-registrations  - print when core.matrix implementations are registered\n     :reload-namespaces  - require :reload implementation namespaces when setting the current implementation"],"~$set-current-implementation",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",166,"^H",7,"^I",166,"^J",33,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^O","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   Throws an exception if the implementation cannot be loaded.\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"^:","~$clojure.core.matrix.implementations/set-current-implementation","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",33,"^R",["^L",[["~$m"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",166,"^I",166,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^O","Sets the currently active core.matrix implementation.\n\n   Parameter may be\n    - A known keyword for the implementation e.g. :vectorz\n    - An existing instance from the implementation\n\n   Throws an exception if the implementation cannot be loaded.\n\n   This is used primarily for functions that construct new matrices, i.e. it determines the\n   implementation used for expressions like: (matrix [[1 2] [3 4]])"],"~$register-implementation",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",89,"^H",7,"^I",89,"^J",30,"^K",["^L",["^M",["^L",[["~$canonical-object"],["~$key","^1A"]]]]],"^O","Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times.","~:top-fn",["^ ","^Q",false,"^U",2,"^R",["^L",[["^1A"],["^1B","^1A"]]],"^K",["^L",[["^1A"],["^1B","^1A"]]],"^T",["^L",[null,null]]]],"^:","~$clojure.core.matrix.implementations/register-implementation","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",30,"^1C",["^ ","^Q",false,"^U",2,"^R",["^L",[["^1A"],["^1B","^1A"]]],"^K",["^L",[["^1A"],["^1B","^1A"]]],"^T",["^L",[null,null]]],"^R",["^L",[["^1A"],["^1B","^1A"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",89,"^I",89,"^U",2,"^V",true,"^K",["^L",[["^1A"],["^1B","^1A"]]],"^O","Registers a matrix implementation for use. Should be called by all implementations\n   when they are loaded, once for each implementation keyword registered. Safe to call multiple times."],"~$try-load-implementation",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",104,"^H",8,"^I",104,"^J",31,"~:private",true,"^K",["^L",["^M",["^L",[["~$k"]]]]],"^O","Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"^1F",true,"^:","~$clojure.core.matrix.implementations/try-load-implementation","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",31,"^R",["^L",[["~$k"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",104,"^I",104,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["~$k"]]]]],"^O","Attempts to load an implementation for the given keyword.\n   Returns nil if not possible, a non-nil matrix value of the correct implementation otherwise."],"~$canonical-objects",["^ ","^:","~$clojure.core.matrix.implementations/canonical-objects","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",73,"^H",1,"^I",79,"^J",20,"^O","An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols.","^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",79,"^H",3,"^I",79,"^J",20,"^O","An atom holding a map of canonical objects for each loaded core.matrix implementation.\n\n   Canonical objects may be used to invoke protocol methods on an instance of the correct\n   type to get implementation-specific behaviour. Canonical objects are required to support\n   all mandatory core.matrix protocols."],"^Z","~$any"],"~$DEFAULT-IMPLEMENTATION",["^ ","^:","~$clojure.core.matrix.implementations/DEFAULT-IMPLEMENTATION","^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",45,"^H",1,"^I",45,"^J",28,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",45,"^H",6,"^I",45,"^J",28],"^O","The default implementation used in core.matrix. Currently set to `:persistent-vector` for maximum\n   compatibility with regular Clojure code.","^Z","^["],"~$get-implementation-key",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",81,"^H",7,"^I",81,"^J",29,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^O","Returns the implementation keyword  for a given object"],"^:","~$clojure.core.matrix.implementations/get-implementation-key","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",29,"^R",["^L",[["~$m"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",81,"^I",81,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^O","Returns the implementation keyword  for a given object"],"~$get-canonical-object",["^ ","^D",null,"^E",["^ ","^F","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^G",132,"^H",7,"^I",132,"^J",27,"^K",["^L",["^M",["^L",[[],["~$m"]]]]],"^O","Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found.","^1C",["^ ","^Q",false,"^U",1,"^R",["^L",[[],["~$m"]]],"^K",["^L",[[],["~$m"]]],"^T",["^L",[null,null]]]],"^:","~$clojure.core.matrix.implementations/get-canonical-object","^Q",false,"^F","resources/public/cljs/out/clojure/core/matrix/implementations.cljc","^J",27,"^1C",["^ ","^Q",false,"^U",1,"^R",["^L",[[],["~$m"]]],"^K",["^L",[[],["~$m"]]],"^T",["^L",[null,null]]],"^R",["^L",[[],["~$m"]]],"^S",null,"^T",["^L",[null,null]],"^H",1,"^G",132,"^I",132,"^U",1,"^V",true,"^K",["^L",[[],["~$m"]]],"^O","Gets the canonical object for a specific implementation. The canonical object is used\n   to call implementation-specific protocol functions where required (e.g. creation of new\n   arrays of the correct type for the implementation).\n\n   Returns nil if the implementation cannot be found."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~$clojure.core.matrix.impl.ndarray-double","~:vectorz-opencl","~:ndarray-long","~$mikera.vectorz.opencl-api","~$nd4clj.kiw","~:ejml","~:weka","~$clojure.core.matrix.impl.wrappers","~:persistent-map","~:else","~$cav.mtj.core.matrix","~:clojure","~:double-array","~$clatrix.core","~:persistent-vector","~$uncomplicate.neanderthal.impl.matrix-api","~:nd4j","~$thinktopic.aljabr.core","~$mikera.vectorz.matrix-api","~:print-registrations","~:commons-math","~$clojure.core.matrix.impl.sequence","~:jblas","~:mtj","~$clj-ml.matrix-api","~$clojure.core.matrix.impl.ndarray","~$clojure.core.matrix.impl.dataset","~:clatrix","~:scalar-wrapper","~:neanderthal","~$clojure.core.matrix.impl.sparse-map","~:sequence","~:ndarray-float","~:reload-namespaces","~:TODO","~:ujmp","~:nd-wrapper","~:ndarray","~:parallel-colt","~$clojure.core.matrix.impl.ndarray-object","~:ndarray-double","~:aljabr","~$clojure.core.matrix.impl.double-array","~$clojure.core.matrix.impl.persistent-vector","~$clojure.core.matrix.impl.clojure","~:dataset","~:vectorz","~$apache-commons-matrix.core","~:slice-wrapper"]],"~:order",["^2W","^1V","^2F","^24","^2N","^2Q","^2I","^1W","^27","^21","^2H","^25","^2E","^2Y","^2M","^2V","^2?","^2D","^2O","^1Z","^29","^2L","^1[","^2=","^2@","^2R","^2;","^1X","^28","^2U","^2P","^1U","^2B","^2T","^2G","^2>","^2S","^20","^2C","^2K","^26","^1Y","^2A","^2X","^23","^2:","^2<","^2J","^22"]],"^O","Namespace for management of core.matrix implementations. Users should avoid using these\n   functions directly as they are intended for library and tool writers."]