["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Array",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$array?"]],"~:name","~$clojure.core.matrix.macros","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$is-double-array?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","~:line",62,"~:column",11,"~:end-line",62,"~:end-column",27,"~:macro",true,"~:arglists",["~#list",["~$quote",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-double-array?","~:variadic",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",27,"~:method-params",["^I",[["~$&form","~$&env","~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"^C",62,"^G",true,"^E",62,"~:max-fixed-arity",3,"~:fn-var",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"~$is-long-array?",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",58,"^D",11,"^E",58,"^F",25,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-long-array?","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",25,"^M",["^I",[["^N","^O","~$m"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",58,"^G",true,"^E",58,"^R",3,"^S",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"~$iae-when-not",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",37,"^D",11,"^E",37,"^F",23,"^G",true,"^H",["^I",["^J",["^I",[["~$pred?","~$exception-str"]]]]],"~:doc","Throws an IllegalArgumentException when the predicate is not satisfied"],"^8","~$clojure.core.matrix.macros/iae-when-not","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",23,"^M",["^I",[["^N","^O","^W","^X"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",37,"^G",true,"^E",37,"^R",4,"^S",false,"^H",["^I",["^J",["^I",[["^W","^X"]]]]],"^Y","Throws an IllegalArgumentException when the predicate is not satisfied"],"~$c-for",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",66,"^D",11,"^E",66,"^F",16,"^G",true,"^H",["^I",["^J",["^I",[["~$loops","~$&","~$body"]]]]],"^Y","C-like loop with nested loops support","~:top-fn",["^ ","^L",true,"^R",3,"^M",[["^I",["^N","^O","^10","^11"]]],"^H",["^I",[["^N","^O","^10","~$&","^11"]]],"^Q",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/c-for","^L",true,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",16,"^12",["^ ","^L",true,"^R",3,"^M",[["^I",["^N","^O","^10","^11"]]],"^H",["^I",[["^N","^O","^10","~$&","^11"]]],"^Q",["^I",[null]]],"^M",[["^I",["^N","^O","^10","^11"]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",66,"^G",true,"^E",66,"^R",3,"^S",false,"^H",["^I",[["^N","^O","^10","~$&","^11"]]],"^Y","C-like loop with nested loops support"],"~$scalar-coerce",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",79,"^D",11,"^E",79,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^Y","Macro to coerce to scalar value with an efficient dispatch sequence"],"^8","~$clojure.core.matrix.macros/scalar-coerce","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",24,"^M",["^I",[["^N","^O","~$x"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",79,"^G",true,"^E",79,"^R",3,"^S",false,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^Y","Macro to coerce to scalar value with an efficient dispatch sequence"],"~$iae",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",32,"^D",11,"^E",32,"^F",14,"^G",true,"^H",["^I",["^J",["^I",[["^X"]]]]],"^Y","Throws IllegalArgumentException with provided string"],"^8","~$clojure.core.matrix.macros/iae","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",14,"^M",["^I",[["^N","^O","^X"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",32,"^G",true,"^E",32,"^R",3,"^S",false,"^H",["^I",["^J",["^I",[["^X"]]]]],"^Y","Throws IllegalArgumentException with provided string"],"~$doseq-indexed",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",43,"^D",11,"^E",43,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[[["~$val-sym","~$values","~$index-sym"],"~$&","~$code"]]]]],"^Y","loops over a set of values, binding index-sym to the 0-based index of each value","^12",["^ ","^L",true,"^R",3,"^M",[["^I",["^N","^O",["^19","^1:","^1;"],"^1<"]]],"^H",["^I",[["^N","^O",["^19","^1:","^1;"],"~$&","^1<"]]],"^Q",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/doseq-indexed","^L",true,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",24,"^12",["^ ","^L",true,"^R",3,"^M",[["^I",["^N","^O",["^19","^1:","^1;"],"^1<"]]],"^H",["^I",[["^N","^O",["^19","^1:","^1;"],"~$&","^1<"]]],"^Q",["^I",[null]]],"^M",[["^I",["^N","^O",["^19","^1:","^1;"],"^1<"]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",43,"^G",true,"^E",43,"^R",3,"^S",false,"^H",["^I",[["^N","^O",["^19","^1:","^1;"],"~$&","^1<"]]],"^Y","loops over a set of values, binding index-sym to the 0-based index of each value"],"^7",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",87,"^D",11,"^E",87,"^F",17,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^Y","Returns true if the parameter is an N-dimensional array of any type"],"^8","~$clojure.core.matrix.macros/array?","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",17,"^M",["^I",[["^N","^O","~$m"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",87,"^G",true,"^E",87,"^R",3,"^S",false,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^Y","Returns true if the parameter is an N-dimensional array of any type"],"~$TODO",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",28,"^D",11,"^E",28,"^F",15,"^G",true,"^H",["^I",["^J",["^I",[[],["~$&","~$vals"]]]]],"^12",["^ ","^L",true,"^R",2,"^M",["^I",[["^N","^O"]]],"^H",["^I",[["^N","^O"],["^N","^O","~$&","^1@"]]],"^Q",["^I",[null,null]]]],"^8","~$clojure.core.matrix.macros/TODO","^L",true,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",15,"^12",["^ ","^L",true,"^R",2,"^M",["^I",[["^N","^O"]]],"^H",["^I",[["^N","^O"],["^N","^O","~$&","^1@"]]],"^Q",["^I",[null,null]]],"^M",["^I",[["^N","^O"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",28,"^G",true,"^E",28,"^R",2,"^S",false,"^H",["^I",[["^N","^O"],["^N","^O","~$&","^1@"]]]],"~$error",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",6,"^D",11,"^E",6,"^F",16,"^G",true,"^H",["^I",["^J",["^I",[["~$&","^1@"]]]]],"^Y","Throws an error with the provided message(s)","^12",["^ ","^L",true,"^R",2,"^M",[["^I",["^N","^O","^1@"]]],"^H",["^I",[["^N","^O","~$&","^1@"]]],"^Q",["^I",[null]]]],"^8","~$clojure.core.matrix.macros/error","^L",true,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",16,"^12",["^ ","^L",true,"^R",2,"^M",[["^I",["^N","^O","^1@"]]],"^H",["^I",[["^N","^O","~$&","^1@"]]],"^Q",["^I",[null]]],"^M",[["^I",["^N","^O","^1@"]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",6,"^G",true,"^E",6,"^R",2,"^S",false,"^H",["^I",[["^N","^O","~$&","^1@"]]],"^Y","Throws an error with the provided message(s)"],"~$is-object-array?",["^ ","^@",null,"^A",["^ ","^B","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/macros.cljc","^C",54,"^D",11,"^E",54,"^F",27,"^G",true,"^H",["^I",["^J",["^I",[["~$m"]]]]]],"^8","~$clojure.core.matrix.macros/is-object-array?","^L",false,"^B","resources/public/cljs/out/clojure/core/matrix/macros.cljc","^F",27,"^M",["^I",[["^N","^O","~$m"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",54,"^G",true,"^E",54,"^R",3,"^S",false,"^H",["^I",["^J",["^I",[["~$m"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$clojure.core.matrix.protocols/get-0d","~$cljs.core/str","~$clojure.core.matrix.protocols/is-scalar?","~$cljs.core/when","~$vals__21752__auto__","~$cljs.core/=","^17","~:else","~$cljs.core/seq","~$cljs.core/when-not","~$do","^1C","~$if","~$cljs.core/let","~$cljs.core/number?","~$cljs.core/long","~$cljs.core/cond","~$js/Array","~$cljs.core/loop","~$recur","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/not","~$cljs.core/first","~$x__21782__auto__","~$throw","~$cljs.core/type","~$cljs.core/inc","~$IllegalArgumentException."]],"~:order",["^25","^20","^1K","^1C","^28","^1R","^17","^1Z","^1N","^1Q","^1W","^1T","^1U","^23","^1[","^21","^27","^1O","^1Y","^26","^1M","^1S","^24","^1X","^1V","^1P","^1J","^22","^1L"]],"^Y","Namespace for core.matrix macros. Keeping them separate allows us to do conditional\n  macros that can handle the differences between Clojure and Clojurescript."]