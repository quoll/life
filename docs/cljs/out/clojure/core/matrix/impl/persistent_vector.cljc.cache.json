["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Array",["^ "]],"~:use-macros",["^ ","~$native-array?","~$clojure.core.matrix.macros-cljs","~$scalar-coerce","~$clojure.core.matrix.macros","~$vector-1d?","~$clojure.core.matrix.impl.persistent-vector","~$mapmatrix","~$clojure.core.matrix.impl.common","~$doseq-indexed","^8","~$error","^8"],"~:excludes",["~#set",[]],"~:name","^:","~:imports",null,"~:requires",["^ ","~$mp","~$clojure.core.matrix.protocols","^E","^E","~$imp","~$clojure.core.matrix.implementations","^G","^G","^<","^<","~$mops","~$clojure.core.matrix.impl.mathsops","^I","^I"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^;","^<"],"~:defs",["^ ","~$persistent-vector-coerce",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","~:line",93,"~:column",7,"~:end-line",93,"~:end-column",31,"~:arglists",["~#list",["~$quote",["^V",[["~$x"]]]]],"~:doc","Coerces to nested persistent vectors"],"^A","~$clojure.core.matrix.impl.persistent-vector/persistent-vector-coerce","~:variadic",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",31,"~:method-params",["^V",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"^Q",93,"^S",93,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^X","Coerces to nested persistent vectors"],"~$coerce-nested",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",48,"^R",7,"^S",48,"^T",20,"^U",["^V",["^W",["^V",[["~$v"]]]]],"^X","Ensures a vector is fully coerced to nested persistent vectors"],"^A","~$clojure.core.matrix.impl.persistent-vector/coerce-nested","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",20,"^[",["^V",[["~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",48,"^S",48,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$v"]]]]],"^X","Ensures a vector is fully coerced to nested persistent vectors"],"~$mapv-identity-check",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",61,"^R",8,"^S",61,"^T",27,"~:private",true,"^U",["^V",["^W",["^V",[["~$f","~$v"]]]]],"^X","Maps a function over a persistent vector, only modifying the vector if the function\n   returns a different value"],"^17",true,"^A","~$clojure.core.matrix.impl.persistent-vector/mapv-identity-check","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",27,"^[",["^V",[["~$f","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",61,"^S",61,"^12",2,"^13",true,"^U",["^V",["^W",["^V",[["~$f","~$v"]]]]],"^X","Maps a function over a persistent vector, only modifying the vector if the function\n   returns a different value"],"~$check-vector-shape",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",73,"^R",8,"^S",73,"^T",26,"^17",true,"^U",["^V",["^W",["^V",[["~$v","~$shape"]]]]]],"^17",true,"^A","~$clojure.core.matrix.impl.persistent-vector/check-vector-shape","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",26,"^[",["^V",[["~$v","^1:"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",73,"^S",73,"^12",2,"^13",true,"^U",["^V",["^W",["^V",[["~$v","^1:"]]]]]],"~$is-nested-persistent-vectors?",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",82,"^R",7,"^S",82,"^T",36,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^X","Test if array is already in nested persistent vector array format."],"^A","~$clojure.core.matrix.impl.persistent-vector/is-nested-persistent-vectors?","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",36,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",82,"^S",82,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^X","Test if array is already in nested persistent vector array format."],"~$vector-dimensionality",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",111,"^R",7,"^S",111,"^T",28,"^U",["^V",["^W",["^V",[["~$m"]]]]],"^X","Calculates the dimensionality (== nesting depth) of nested persistent vectors"],"^A","~$clojure.core.matrix.impl.persistent-vector/vector-dimensionality","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",28,"^[",["^V",[["~$m"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",111,"^S",111,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$m"]]]]],"^X","Calculates the dimensionality (== nesting depth) of nested persistent vectors"],"~$build-maths-function",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",508,"^R",7,"^S",508,"^T",27,"^U",["^V",["^W",["^V",[[["~$name","~$func"]]]]]]],"^A","~$clojure.core.matrix.impl.persistent-vector/build-maths-function","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",27,"^[",["^V",[["~$p__29539"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",508,"^S",508,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[[["^1A","^1B"]]]]]]],"~$copy-to-double-array!",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",573,"^R",8,"^S",573,"^T",29,"^17",true,"^U",["^V",["^W",["^V",[["~$m","~$arr","~$off","~$size"]]]]],"^X","Copy an arbitrary array to a region of a double array.\n   Assumes size represents the element count of the array, must be greater than zero."],"^17",true,"^A","~$clojure.core.matrix.impl.persistent-vector/copy-to-double-array!","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",29,"^[",["^V",[["~$m","^1F","^1G","^1H"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",573,"^S",573,"^12",4,"^13",true,"^U",["^V",["^W",["^V",[["~$m","^1F","^1G","^1H"]]]]],"^X","Copy an arbitrary array to a region of a double array.\n   Assumes size represents the element count of the array, must be greater than zero."],"~$copy-to-object-array",["^ ","^N",null,"^O",["^ ","^P","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^Q",608,"^R",8,"^S",608,"^T",28,"^17",true,"^U",["^V",["^W",["^V",[["~$m","^1F","^1G","^1H"]]]]]],"^17",true,"^A","~$clojure.core.matrix.impl.persistent-vector/copy-to-object-array","^Z",false,"^P","resources/public/cljs/out/clojure/core/matrix/impl/persistent_vector.cljc","^T",28,"^[",["^V",[["~$m","^1F","^1G","^1H"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",608,"^S",608,"^12",4,"^13",true,"^U",["^V",["^W",["^V",[["~$m","^1F","^1G","^1H"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^:","^:","^8","^8","^6","^6","^H","^I","^I","^I"],"~:cljs.analyzer/constants",["^ ","~:seen",["^@",["~$clojure.core.matrix.impl.common/mapmatrix","~:else","~:default","~:persistent-vector","~$x__29538__auto__","~$m","~$cljs.core/double","~$cljs.core/fn","^X"]],"~:order",["^1Q","^1R","^1S","^X","~$m","^1P","^1V","^1T","^1U"]],"^X","Namespace for core.matrix implementation using nested persistent vectors.\n\n   Array format is defined as:\n   - Top level object is an instance of clojure.lang.IPersistentVector\n   - If the array is 1-dimensional each element is a scalar\n   - Otherwise each element is an sub-array with identical shape (1 dimensional or more)\n\n   Note that this allows for other array implementations to be nested inside persistent vectors,\n   provided all nested arrays have the same shape and dimensionality of at least 1."]