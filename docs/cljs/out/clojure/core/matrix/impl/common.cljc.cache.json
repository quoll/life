["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$scalar-coerce","~$clojure.core.matrix.macros"],"~:excludes",["~#set",[]],"~:name","~$clojure.core.matrix.impl.common","~:imports",null,"~:requires",["^ ","~$s","~$clojure.string","^=","^=","~$mp","~$clojure.core.matrix.protocols","^?","^?","~$u","~$clojure.core.matrix.utils","^@","^@","~$mi","~$clojure.core.matrix.implementations","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$get-impl-objs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","~:line",11,"~:column",7,"~:end-line",11,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^O",[[]]]]],"~:doc","Returns a list of available implementations' objects"],"^9","~$clojure.core.matrix.impl.common/get-impl-objs","~:variadic",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",20,"~:method-params",["^O",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"^J",11,"^L",11,"~:max-fixed-arity",0,"~:fn-var",true,"^N",["^O",["^P",["^O",[[]]]]],"^Q","Returns a list of available implementations' objects"],"~$construct-matrix",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",48,"^K",7,"^L",48,"^M",23,"^N",["^O",["^P",["^O",[["~$impl","~$data"]]]]],"^Q","Constructs an array from the provided data, attempting to use the given implementation.\n   Uses a default implementation if needed"],"^9","~$clojure.core.matrix.impl.common/construct-matrix","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",23,"^T",["^O",[["^Z","^["]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",48,"^L",48,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^Z","^["]]]]],"^Q","Constructs an array from the provided data, attempting to use the given implementation.\n   Uses a default implementation if needed"],"~$mapmatrix",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",58,"^K",7,"^L",58,"^M",16,"^N",["^O",["^P",["^O",[["~$f","~$m"],["~$f","~$m1","~$m2"],["~$f","^12","^13","~$m3"],["~$f","^12","^13","^14","~$&","~$more"]]]]],"^Q","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value.","~:top-fn",["^ ","^S",true,"^W",4,"^T",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"]]],"^N",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"],["~$f","^12","^13","^14","~$&","^15"]]],"^V",["^O",[null,null,null,null]]]],"^9","~$clojure.core.matrix.impl.common/mapmatrix","^S",true,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",16,"^16",["^ ","^S",true,"^W",4,"^T",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"]]],"^N",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"],["~$f","^12","^13","^14","~$&","^15"]]],"^V",["^O",[null,null,null,null]]],"^T",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"]]],"^U",null,"^V",["^O",[null,null,null,null]],"^K",1,"^J",58,"^L",58,"^W",4,"^X",true,"^N",["^O",[["~$f","~$m"],["~$f","^12","^13"],["~$f","^12","^13","^14"],["~$f","^12","^13","^14","~$&","^15"]]],"^Q","Maps a function over all components of a persistent vector matrix. Like mapv but for matrices.\n   Assumes correct dimensionality / shape.\n\n   First array argument must be nested persistent vectors. Others may be\n   any arrays of the same shape.\n\n   Returns a nested persistent vector matrix or a scalar value."],"~$logistic-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",116,"^K",7,"^L",116,"^M",18,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Logistic function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/logistic-fn","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",18,"^T",["^O",[["~$t"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",116,"^L",116,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Logistic function, with primitive type hints"],"~$softplus-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",122,"^K",7,"^L",122,"^M",18,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Softplus function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/softplus-fn","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",18,"^T",["^O",[["~$t"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",122,"^L",122,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","Softplus function, with primitive type hints"],"~$relu-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",130,"^K",7,"^L",130,"^M",14,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","ReLU function, with primitive type hints"],"^9","~$clojure.core.matrix.impl.common/relu-fn","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",14,"^T",["^O",[["~$t"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",130,"^L",130,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$t"]]]]],"^Q","ReLU function, with primitive type hints"],"~$square?",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",135,"^K",7,"^L",135,"^M",14,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true if matrix is square (2D with same number of rows and columns)"],"^9","~$clojure.core.matrix.impl.common/square?","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",14,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",135,"^L",135,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true if matrix is square (2D with same number of rows and columns)"],"~$symmetric-matrix-entries?",["^ ","^G",null,"^H",["^ ","^I","/Users/pgearon/dev/public/life/resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^J",145,"^K",7,"^L",145,"^M",32,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true iff square matrix m is symmetric."],"^9","~$clojure.core.matrix.impl.common/symmetric-matrix-entries?","^S",false,"^I","resources/public/cljs/out/clojure/core/matrix/impl/common.cljc","^M",32,"^T",["^O",[["~$m"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",145,"^L",145,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^Q","Returns true iff square matrix m is symmetric."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:else","^9","~:persistent-vector","~:TODO","~:obj"]],"~:order",["^1G","^1H","^1F","^9","^1I"]],"^Q","Namespace containing common functions useful for core.matrix implementatations"]